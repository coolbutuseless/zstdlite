% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/serialize.R
\name{zstd_compress}
\alias{zstd_compress}
\alias{zstd_decompress}
\title{Compress/Decompress raw vectors and character strings.}
\usage{
zstd_compress(x, ..., dst = NULL, cctx = NULL, use_file_streaming = FALSE)

zstd_decompress(
  src,
  type = "raw",
  ...,
  dctx = NULL,
  use_file_streaming = FALSE
)
}
\arguments{
\item{x}{Data to be compressed.  This may be a raw vector, or a
character string}

\item{...}{extra arguments passed to \code{zstd_cctx()} or \code{zstd_dctx()}
context initializers. 
Note: These argument are only used when \code{cctx} or \code{dctx} is NULL}

\item{dst}{destination in which to write the compressed data. If \code{NULL}
(the default) data will be returned as a raw vector.  If a string, 
then this will be the filename to which the data is written.  \code{dst}
may also be a connection object e.g. \code{pipe()}, \code{file()} etc.}

\item{cctx}{ZSTD Compression Context created by \code{zstd_cctx()} or NULL.
Default: NULL will create a default compression context on-the-fly}

\item{use_file_streaming}{Use the streaming interface when reading or writing
to a file?  This may reduce memory allocations
and make better use of mutlithreading.  Default: FALSE}

\item{src}{Source from which compressed data is read. If a string, 
then this will be the filename to read data from.  \code{dst}
may also be a connection object e.g. \code{pipe()}, \code{file()} etc.}

\item{type}{Should data be returned as a 'raw' vector or as a 'string'? 
Default: 'raw'}

\item{dctx}{ZSTD Decompression Context created by \code{zstd_dctx()} or NULL.
Default: NULL will create a default decompression context on-the-fly.}
}
\value{
Raw vector of compressed data, or \code{NULL} if file created with compressed data
}
\description{
This function is appropriate when handling data from other systems e.g.
data compressed with the \code{zstd} command-line, or other compression
programs.
}
\examples{
# With raw vectors
dat <- sample(as.raw(1:10), 1000, replace = TRUE)
vec <- zstd_compress(x = dat)
zstd_decompress(src = vec)

# With files
tmp <- tempfile()
zstd_compress(x = dat, dst = tmp)
zstd_decompress(src = tmp)

# With connections
tmp <- tempfile()
zstd_compress(x = dat, dst = file(tmp))
zstd_decompress(src = file(tmp))
}
